<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       					   http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- 配置service
        <bean> 配置需要创建的对象
            id ：用于之后从spring容器获得实例时使用的
            class ：需要创建实例的全限定类名
             scope="prototype"(不是必须)，每次get创建一个新的bean
             init-method 用于配置初始化方法,准备数据等(不是必须)
		    destroy-method 用于配置销毁方法,清理资源等(不是必须)
         <property> 用于进行属性注入
			name： bean的属性名，通过setter方法获得
				setBookDao ##> BookDao  ##> bookDao
			ref ：另一个bean的id值的引用
    -->
    <!-- 将静态工厂创建的实例交予spring
		class 确定静态工厂全限定类名
		factory-method 确定静态方法名
	-->


    <bean id="userServiceId" class="a.ioc.UserServiceImpl" scope="prototype"></bean>

    <bean id="bookServiceId" class="b.di.BookServiceImpl">
        <property name="bookDao" ref="bookDaoId"></property>
    </bean>
    <bean id="bookDaoId" class="b.di.BookDaoImpl" init-method="myInit" destroy-method="myDestory"></bean>

    <bean id="userServiceIdFactory" class="c.inject.b_static_factory.MyBeanFactory"
        factory-method="createService"></bean>
    <bean id="userServiceIdFactory2" class="c.inject.c_factory.MyBeanFactory"></bean>
    <!-- 获得userservice
		* factory-bean 确定工厂实例
		* factory-method 确定普通方法
	-->

    <bean id="userServiceByFactory" factory-bean="userServiceIdFactory2" factory-method="createService"></bean>
</beans>
