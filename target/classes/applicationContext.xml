<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       					   http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- 配置service
        <bean> 配置需要创建的对象
            id ：用于之后从spring容器获得实例时使用的
            class ：需要创建实例的全限定类名
             scope="prototype"(不是必须)，每次get创建一个新的bean
             init-method 用于配置初始化方法,准备数据等(不是必须)
		    destroy-method 用于配置销毁方法,清理资源等(不是必须)
         <property> 用于进行属性注入
			name： bean的属性名，通过setter方法获得
				setBookDao ##> BookDao  ##> bookDao
			ref ：另一个bean的id值的引用
    -->
    <!-- 将静态工厂创建的实例交予spring
		class 确定静态工厂全限定类名
		factory-method 确定静态方法名
	-->
 <!--   <constructor-arg> 用于配置构造方法一个参数argument
    name ：参数的名称
    value：设置普通数据
    ref：引用数据，一般是另一个bean id值

    index ：参数的索引号，从0开始 。如果只有索引，匹配到了多个构造方法时，默认使用第一个。
    type ：确定参数类型
    例如：使用名称name
    <constructor-arg name="username" value="jack"></constructor-arg>
    <constructor-arg name="age" value="18"></constructor-arg>
    例如2：【类型type 和  索引 index】
    <constructor-arg index="0" type="java.lang.String" value="1"></constructor-arg>
    <constructor-arg index="1" type="java.lang.Integer" value="2"></constructor-arg>
-->
    <!-- setter方法注入
		* 普通数据
			<property name="" value="值">
			等效
			<property name="">
				<value>值
		* 引用数据
			<property name="" ref="另一个bean">
			等效
			<property name="">
				<ref bean="另一个bean"/>
	-->

<!--
    对“setter方法注入”进行简化，替换<property name="属性名">，而是在
    <bean p:属性名="普通值"  p:属性名-ref="引用值">
    p命名空间使用前提，必须添加命名空间
    xmlns:p="http://www.springframework.org/schema/p"
-->
    <!--
    <property name="cname" value="#{'jack'}"></property>
    <property name="cname" value="#{customerId.cname.toUpperCase()}"></property>
        通过另一个bean，获得属性，调用的方法
    <property name="cname" value="#{customerId.cname?.toUpperCase()}"></property>
        ?.  如果对象不为null，将调用方法-->
    <!--
            集合的注入都是给<property>添加子标签
                数组：<array>
                List：<list>
                Set：<set>
                Map：<map> ，map存放k/v 键值对，使用<entry>描述
                Properties：<props>  <prop key=""></prop>  【】

            普通数据：<value>
            引用数据：<ref>
        -->

    <!--设置了就可以使用注解，默认不生效-->
    <context:annotation-config></context:annotation-config>


    <bean id="personId" class="d.bean.Person">
        <property name="companyAddrId" value="北京"></property>
        <property name="homeAddr">
            <value>加</value>
        </property>
    </bean>


    <bean id="userServiceId" class="a.ioc.UserServiceImpl" scope="prototype"></bean>

    <bean id="bookServiceId" class="b.di.BookServiceImpl">
        <property name="bookDao" ref="bookDaoId"></property>
    </bean>
    <bean id="bookDaoId" class="b.di.BookDaoImpl" init-method="myInit" destroy-method="myDestory"></bean>

    <!--<bean id="userServiceIdFactory" class="c.inject.b_static_factory.MyBeanFactory"
        factory-method="createService"></bean>
    <bean id="userServiceIdFactory2" class="c.inject.c_factory.MyBeanFactory"></bean>
    &lt;!&ndash; 获得userservice
		* factory-bean 确定工厂实例
		* factory-method 确定普通方法
	&ndash;&gt;

    <bean id="userServiceByFactory" factory-bean="userServiceIdFactory2" factory-method="createService"></bean>
-->
    <bean class="d.bean.MyBeanPostProcessor" ></bean>

    <bean id="userId" class="d.bean.User">
        <constructor-arg index="0" type="java.lang.String" value="1"></constructor-arg>
        <constructor-arg index="1" type="java.lang.Integer" value="2"></constructor-arg>
    </bean>
</beans>
